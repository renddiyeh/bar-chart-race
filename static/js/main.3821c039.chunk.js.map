{"version":3,"sources":["AxisTop.js","RacingAxisTop.js","Bar.js","RacingBarGroup.js","RacingBarChart.js","useKeyframes.js","data.tsv","App.js","useWindowSize.js","serviceWorker.js","index.js"],"names":["AxisTop","props","domainMax","xMax","numTicks","Math","floor","xScaleForAxis","scaleLinear","domain","range","top","left","scale","tickLabelProps","textAnchor","dy","fontSize","AnimatedAxisTop","animated","RacingAxisTop","forwardRef","ref","duration","prevDomainMax","useRef","current","springProps","useSpring","from","to","s","format","Bar","color","x","y","width","height","name","value","author","Fragment","RectClipPath","id","fill","stroke","strokeWidth","fontFamily","clipPath","fontWeight","AnimatedBar","RacingBarGroup","frameData","xScale","yScale","colorScale","transition","useTransition","map","idx","category","key","item","initial","d","leave","enter","update","useMemo","bandwidth","values","interpolate","v","toFixed","categories","scaleOrdinal","RacingBarChart","React","numOfBars","margin","keyframes","onStart","onStop","useState","frameIdx","animationKey","playing","setAnimation","updateFrameRef","useEffect","setTimeout","prevFrameIdx","others","isLastFrame","length","nextFrameIdx","barGroupRef","axisRef","useImperativeHandle","replay","clearTimeout","start","animation","stop","prevPlayingRef","useLayoutEffect","frame","currentDate","date","data","right","yMax","bottom","max","lengendScale","scaleBand","_","Array","paddingInner","dateInYear","getFullYear","getMonth","x1","y1","x2","y2","labels","Group","label","i","xPos","text","slice","style","defaultProps","makeKeyframes","numOfSlice","findData","dataByDateAndName","Map","forEach","dataPoint","get","nextGroup","set","e","buildFindData","nameSet","Set","nameList","dateSet","frames","sort","reduce","result","prev","next","prevTimestamp","Date","getTime","diff","sliceDate","sliceData","prevValue","nextDataPoint","sliceValue","push","a","b","useKeyframes","dataUrl","setKeyframes","tsv","then","transformed","all","q","qPath","hasQData","filter","String","padStart","join","Number","prototype","apply","chartMargin","ratio","App","setDuration","windowWidth","getSize","window","innerWidth","innerHeight","windowSize","setWindowSize","onResize","addEventListener","removeEventListener","useWindowSize","chartWidth","min","tsvData","chartRef","forceUpdate","maxWidth","paddingTop","onClick","type","step","onChange","target","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3821c039.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { scaleLinear } from \"@vx/scale\";\r\nimport { AxisTop as VxAxisTop } from \"@vx/axis\";\r\n\r\nconst AxisTop = (props) => {\r\n  const { domainMax, xMax } = props;\r\n  const numTicks = xMax > 500 ? 5 : Math.floor(xMax / 100);\r\n  const xScaleForAxis = scaleLinear({\r\n    domain: [0, domainMax],\r\n    range: [0, xMax]\r\n  });\r\n  return <VxAxisTop\r\n    top={0}\r\n    left={0}\r\n    scale={xScaleForAxis}\r\n    tickLabelProps={() => ({ textAnchor: 'middle', dy: '-0.25em', fontSize: 12, })}\r\n    numTicks={numTicks}\r\n  />\r\n}\r\n\r\nAxisTop.propTypes = {\r\n  domainMax: PropTypes.number.isRequired,\r\n  xMax: PropTypes.number.isRequired,\r\n};\r\n\r\nexport default AxisTop;","import React, { forwardRef, useRef } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { useSpring, animated } from \"react-spring\";\r\nimport AxisTop from \"./AxisTop\";\r\n\r\nconst AnimatedAxisTop = animated(AxisTop);\r\n\r\nconst RacingAxisTop = forwardRef(({ domainMax, xMax, duration }, ref) => {\r\n  const prevDomainMaxRef = useRef(domainMax);\r\n  const prevDomainMax = prevDomainMaxRef.current;\r\n  const springProps = useSpring({\r\n    from: { domainMax: prevDomainMax },\r\n    to: { domainMax },\r\n    duration,\r\n    ref\r\n  });\r\n  return (\r\n    <AnimatedAxisTop\r\n      xMax={xMax}\r\n      {...springProps}\r\n    />\r\n  );\r\n});\r\n\r\nRacingAxisTop.propTypes = {\r\n  domainMax: PropTypes.number.isRequired,\r\n  xMax: PropTypes.number.isRequired,\r\n};\r\n\r\nexport default RacingAxisTop;","import React from \"react\";\r\nimport { Bar as VxBar } from \"@vx/shape\";\r\nimport { Text as VxText } from \"@vx/text\";\r\nimport { RectClipPath } from '@vx/clip-path'\r\n\r\nimport { format } from 'd3-format'\r\n\r\nconst s = format(\".2s\")\r\n\r\nconst Bar = ({ color, x, y, width, height, name, value, author }) => {\r\n  return (\r\n    <React.Fragment>\r\n      <RectClipPath\r\n        id={`clip-${name}`}\r\n        x={x}\r\n        y={y}\r\n        width={width}\r\n        height={height}\r\n      />\r\n      <VxBar\r\n        x={x}\r\n        y={y}\r\n        width={width}\r\n        height={height}\r\n        fill={color}\r\n        stroke=\"black\"\r\n        strokeWidth=\"1\"\r\n      />\r\n      <VxText x={x - 10} y={y + 4 + height / 2} textAnchor=\"end\" fontFamily=\"Noto Sans TC\" fontSize=\"16px\">\r\n        {author}\r\n      </VxText>\r\n      <VxText x={x + width - 10} y={y + 4 + height / 2} textAnchor=\"end\" fontFamily=\"Noto Sans TC\" fontSize=\"16px\" clipPath={`url(#clip-${name})`}>\r\n        {name}\r\n      </VxText>\r\n      <VxText x={x + width + 10} y={y + 5 + height / 2} fontFamily=\"Noto Sans TC\" fontSize=\"20px\" fontWeight=\"700\">\r\n        {s(value)}\r\n      </VxText>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default Bar;\r\n","import React, { forwardRef, useMemo } from \"react\";\r\nimport { useTransition, animated } from \"react-spring\";\r\nimport Bar from \"./Bar\";\r\n\r\nconst AnimatedBar = animated(Bar);\r\n\r\nconst RacingBarGroup = forwardRef(({ frameData, xScale, yScale, colorScale, duration }, ref) => {\r\n  const transition = useTransition(\r\n    frameData.map(({ name, value, category, author, id }, idx) => ({\r\n      y: yScale(idx),\r\n      width: xScale(value),\r\n      value,\r\n      name,\r\n      category,\r\n      author,\r\n      key: id,\r\n    })),\r\n    {\r\n      key: item => item.key,\r\n      initial: d => d,\r\n      from: { y: yScale.range()[1] + 50, width: 0, value: 0 },\r\n      leave: { y: yScale.range()[1] + 50, width: 0, value: 0 },\r\n      enter: d => d,\r\n      update: d => d,\r\n      ref,\r\n      duration,\r\n    }\r\n  );\r\n  const { x, height } = useMemo(() => {\r\n    return {\r\n      x: xScale(0),\r\n      height: yScale.bandwidth(),\r\n    }\r\n  }, [])\r\n  return transition((values, item) => {\r\n    const { y, value, width } = values;\r\n    const { category, name, author, key } = item;\r\n    return (\r\n      <AnimatedBar\r\n        x={x}\r\n        y={y}\r\n        width={width}\r\n        height={height}\r\n        color={colorScale(category)}\r\n        value={value.interpolate(v => v.toFixed())}\r\n        name={name}\r\n        author={author}\r\n        key={key}\r\n      />\r\n    );\r\n  })\r\n});\r\n\r\nexport default RacingBarGroup;\r\n","import React, { useEffect, useImperativeHandle, useMemo, useRef, useState, useLayoutEffect } from \"react\";\r\nimport { scaleLinear, scaleBand, scaleOrdinal } from \"@vx/scale\";\r\nimport { Group } from \"@vx/group\";\r\nimport { LegendOrdinal } from '@vx/legend';\r\n\r\nimport RacingAxisTop from \"./RacingAxisTop\";\r\nimport RacingBarGroup from \"./RacingBarGroup\";\r\n\r\nconst categories = ['文學小說', '商業理財', '生活旅遊', '心理勵志', '其他']\r\n\r\nconst colorScale = scaleOrdinal({\r\n  domain: categories,\r\n  range: ['#F27E7E', '#80D2FF', '#61C67E', '#FFC027', '#CCCCCC'],\r\n});\r\n\r\nconst legendGlyphSize = 32\r\n\r\nconst RacingBarChart = React.forwardRef(({\r\n  numOfBars,\r\n  width,\r\n  height,\r\n  margin,\r\n  keyframes,\r\n  onStart,\r\n  onStop,\r\n  duration,\r\n}, ref) => {\r\n  const [{ frameIdx, animationKey, playing }, setAnimation] = useState({\r\n    frameIdx: 0,\r\n    animationKey: 0,\r\n    playing: false,\r\n  });\r\n  const updateFrameRef = useRef();\r\n  // when replay, increment the key to rerender the chart.\r\n  useEffect(() => {\r\n    if (!updateFrameRef.current && playing) {\r\n      updateFrameRef.current = setTimeout(() => {\r\n        updateFrameRef.current = null;\r\n        setAnimation(({ frameIdx: prevFrameIdx, playing, ...others }) => {\r\n          const isLastFrame = prevFrameIdx === keyframes.length - 1;\r\n          const nextFrameIdx = isLastFrame ? prevFrameIdx : prevFrameIdx + 1;\r\n          return {\r\n            ...others,\r\n            frameIdx: playing ? nextFrameIdx : prevFrameIdx,\r\n            playing: !!(playing && !isLastFrame),\r\n          }\r\n        });\r\n      }, duration);\r\n    }\r\n  });\r\n  const barGroupRef = useRef();\r\n  const axisRef = useRef();\r\n  useImperativeHandle(ref, () => ({\r\n    replay: () => {\r\n      clearTimeout(updateFrameRef.current);\r\n      updateFrameRef.current = null;\r\n      setAnimation(({ animationKey, ...others }) => ({\r\n        ...others,\r\n        frameIdx: 0,\r\n        animationKey: animationKey + 1,\r\n        playing: true,\r\n      }));\r\n    },\r\n    start: () => {\r\n      setAnimation(animation => ({\r\n        ...animation,\r\n        playing: true,\r\n      }));\r\n    },\r\n    stop: () => {\r\n      setAnimation(animation => ({\r\n        ...animation,\r\n        playing: false,\r\n      }));\r\n      barGroupRef.current.stop();\r\n      axisRef.current.stop();\r\n    },\r\n    playing,\r\n  }));\r\n  const prevPlayingRef = useRef(playing);\r\n  useEffect(() => {\r\n    if (prevPlayingRef.current !== playing) {\r\n      if (playing) {\r\n        onStart();\r\n      } else {\r\n        onStop();\r\n      }\r\n    }\r\n    prevPlayingRef.current = playing;\r\n  }, [playing]);\r\n  useLayoutEffect(() => {\r\n    if (barGroupRef.current) {\r\n      if (playing) {\r\n        barGroupRef.current.start();\r\n        axisRef.current.start();\r\n      }\r\n    }\r\n  });\r\n  const frame = keyframes[frameIdx];\r\n  const { date: currentDate, data: frameData } = frame;\r\n  const values = frameData.map(({ value }) => value);\r\n  const xMax = width - margin.left - margin.right;\r\n  const yMax = height - margin.top - margin.bottom;\r\n  const domainMax = Math.max(...values);\r\n  const xScale = scaleLinear({\r\n    domain: [0, domainMax],\r\n    range: [0, xMax]\r\n  });\r\n  const lengendScale = useMemo(() => scaleBand({\r\n    domain: categories.map((_, idx) => idx),\r\n    range: [width * 0.1, width * 0.9],\r\n  }), [width]);\r\n  const yScale = useMemo(\r\n    () =>\r\n      scaleBand({\r\n        domain: Array(numOfBars)\r\n          .fill(0)\r\n          .map((_, idx) => idx),\r\n        range: [0, yMax],\r\n        paddingInner: 0.2,\r\n      }),\r\n    [numOfBars, yMax]\r\n  );\r\n  const dateInYear = `${currentDate.getFullYear()}Q${Math.floor(currentDate.getMonth() / 3) + 1}`;\r\n  // const legendBandwidth = lengendScale.bandwidth()\r\n  const fontSize = width / 40\r\n  return (\r\n    <svg width={width} height={height}>\r\n      <text y=\"40\" x={width / 2} textAnchor=\"middle\" fontWeight=\"700\" fontSize=\"32px\">過去十年大家都看了哪些書？</text>\r\n      <line x1=\"0\" y1=\"60\" x2={width} y2=\"60\" stroke=\"black\" strokeWidth=\"2\"></line>\r\n      <LegendOrdinal scale={colorScale}>\r\n        {labels => (\r\n          <Group top=\"80\">\r\n            {labels.map((label, i) => {\r\n              const xPos = lengendScale(i)\r\n              return (\r\n                <Group key={i} left={xPos}>\r\n                  <rect fill={label.value} width={legendGlyphSize} height={legendGlyphSize} strokeWidth=\"1\" stroke=\"black\" />\r\n                  <text x={35} y={22} fontSize={fontSize}>{label.text}</text>\r\n                </Group>\r\n              )\r\n            })}\r\n          </Group>\r\n        )}\r\n      </LegendOrdinal>\r\n      <line x1=\"0\" y1=\"120\" x2={width} y2=\"120\" stroke=\"black\" strokeWidth=\"2\"></line>\r\n      <Group top={margin.top} left={margin.left} key={animationKey}>\r\n        <RacingBarGroup\r\n          frameData={frameData.slice(0, numOfBars)}\r\n          xScale={xScale}\r\n          yScale={yScale}\r\n          colorScale={colorScale}\r\n          duration={duration}\r\n          ref={barGroupRef}\r\n        />\r\n        <text\r\n          textAnchor=\"end\"\r\n          style={{ fontSize: \"1.25em\" }}\r\n          x={xMax}\r\n          y={yMax}\r\n        >\r\n          {dateInYear}\r\n        </text>\r\n        <line\r\n          x1={0}\r\n          y1={0}\r\n          x2={0}\r\n          y2={yMax}\r\n          stroke=\"black\"\r\n        />\r\n        <RacingAxisTop\r\n          domainMax={domainMax}\r\n          xMax={xMax}\r\n          duration={duration}\r\n          ref={axisRef}\r\n        />\r\n      </Group>\r\n      <rect x={0} y={height - margin.bottom + 40} width={width} height={margin.bottom - 40} fill=\"#CCCCCC\"></rect>\r\n    </svg>\r\n  );\r\n});\r\n\r\nRacingBarChart.defaultProps = {\r\n  width: 600,\r\n  height: 450,\r\n  margin: {\r\n    top: 0,\r\n    right: 0,\r\n    bottom: 0,\r\n    left: 100\r\n  },\r\n};\r\n\r\nexport default RacingBarChart;\r\n","import React from \"react\";\r\nimport { tsv } from 'd3-fetch';\r\nimport { range } from \"lodash\";\r\n\r\nconst buildFindData = data => {\r\n  const dataByDateAndName = new Map();\r\n  data.forEach(dataPoint => {\r\n    const { date, name } = dataPoint;\r\n    if (!dataByDateAndName.get(date)) {\r\n      dataByDateAndName.set(date, { [name]: dataPoint });\r\n    } else {\r\n      const nextGroup = {\r\n        ...dataByDateAndName.get(date),\r\n        [name]: dataPoint\r\n      };\r\n      dataByDateAndName.set(date, nextGroup);\r\n    }\r\n  });\r\n  const finder = ({ date, name }) => {\r\n    try {\r\n      return dataByDateAndName.get(date)[name];\r\n    } catch (e) {\r\n      return null;\r\n    }\r\n  };\r\n  return finder;\r\n}\r\n\r\nconst makeKeyframes = (data, numOfSlice) => {\r\n  /**\r\n   * Assume data is an array of { date: string, name: string, value: number, ...others }.\r\n   * This function return an array of keyframe, each keyframe is { date: Date, data: { name: string, value: number, ...others }[] }.\r\n   * At first we will collect all of the name appearing in the original data.\r\n   * The `data` field of keyframe is descending sorted by `value` field.\r\n   */\r\n  const findData = buildFindData(data);\r\n  const nameSet = new Set(data.map(({ name }) => name));\r\n  const nameList = [...nameSet];\r\n  const dateSet = new Set(data.map(({ date }) => date));\r\n  const dateList = [...dateSet];\r\n\r\n  const frames = dateList.sort().map(date => ({\r\n    date,\r\n    data: nameList.map(name => {\r\n      const dataPoint = findData({ date, name });\r\n      return {\r\n        ...dataPoint,\r\n        value: dataPoint ? dataPoint.value : 0,\r\n      };\r\n    })\r\n  }));\r\n  const keyframes = frames\r\n    .reduce((result, frame, idx) => {\r\n      const prev = frame;\r\n      const next = idx !== frames.length - 1 ? frames[idx + 1] : null;\r\n      if (!next) {\r\n        result.push({ ...frame, date: new Date(frame.date) });\r\n      } else {\r\n        const prevTimestamp = new Date(prev.date).getTime();\r\n        const nextTimestamp = new Date(next.date).getTime();\r\n        const diff = nextTimestamp - prevTimestamp;\r\n        for (let i = 0; i < numOfSlice; i++) {\r\n          const sliceDate = new Date(prevTimestamp + diff * i / numOfSlice);\r\n          const sliceData = frame.data.map(({ name, value, ...others }) => {\r\n            const prevValue = value;\r\n            const nextDataPoint = findData({ date: next.date, name });\r\n            const nextValue = nextDataPoint ? nextDataPoint.value : 0;\r\n            const sliceValue =\r\n              prevValue + (nextValue - prevValue) * i / numOfSlice;\r\n            return {\r\n              name,\r\n              value: sliceValue,\r\n              ...others\r\n            };\r\n          });\r\n          result.push({\r\n            date: sliceDate,\r\n            data: sliceData\r\n          });\r\n        }\r\n      }\r\n      return result;\r\n    }, [])\r\n    .map(({ date, data }) => {\r\n      return {\r\n        date,\r\n        data: data.sort((a, b) => b.value - a.value)\r\n      };\r\n    });\r\n  return keyframes;\r\n};\r\n\r\nfunction useKeyframes(dataUrl, numOfSlice) {\r\n  const [keyframes, setKeyframes] = React.useState([]);\r\n  React.useEffect(() => {\r\n    // csv(dataUrl).then(data => {\r\n    //   const keyframes = makeKeyframes(data.map(d => ({ ...d, value: Number(d.value) })), numOfSlice);\r\n    //   setKeyframes(keyframes);\r\n    // });\r\n    tsv(dataUrl).then((data) => {\r\n      const transformed = range(2010, 2021).reduce((all, y) => {\r\n        range(4).forEach(q => {\r\n          const qPath = `${y}/Q${q + 1}`\r\n          const hasQData = data.filter(d => d[qPath]).map(d => ({\r\n            date: [y, String(q * 3 + 1).padStart(2, '0'), '01'].join('-'),\r\n            id: d['序'],\r\n            name: d['書名'],\r\n            author: d['作者'],\r\n            category: d['分類'],\r\n            value: Number(d[qPath] || 0),\r\n          }))\r\n          Array.prototype.push.apply(all, hasQData)\r\n        })\r\n        return all\r\n      }, [])\r\n      const keyframes = makeKeyframes(transformed, numOfSlice);\r\n      setKeyframes(keyframes);\r\n    })\r\n  }, [dataUrl, numOfSlice]);\r\n  return keyframes;\r\n}\r\n\r\nexport default useKeyframes;","export default __webpack_public_path__ + \"static/media/data.658a2e79.tsv\";","import React, { useState } from \"react\";\r\nimport RacingBarChart from \"./RacingBarChart\";\r\nimport useKeyframes from \"./useKeyframes\";\r\nimport useWindowSize from \"./useWindowSize\";\r\n\r\nimport tsvData from './data.tsv'\r\n\r\nconst numOfBars = 10;\r\nconst numOfSlice = 10;\r\nconst chartMargin = {\r\n  top: 160,\r\n  right: 60,\r\n  bottom: 120,\r\n  left: 100,\r\n};\r\nconst ratio = 697 / 640\r\n\r\nfunction App() {\r\n  const [duration, setDuration] = useState(250)\r\n  const { width: windowWidth } = useWindowSize();\r\n  const chartWidth = Math.min(720, windowWidth) - 64;\r\n  const keyframes = useKeyframes(tsvData, numOfSlice);\r\n  const chartRef = React.useRef();\r\n  const handleReplay = () => {\r\n    chartRef.current.replay();\r\n  }\r\n  const handleStart = () => {\r\n    chartRef.current.start();\r\n  }\r\n  const handleStop = () => {\r\n    chartRef.current.stop();\r\n  }\r\n  const playing = chartRef.current ? chartRef.current.playing : false;\r\n  const [_, forceUpdate] = useState();\r\n  return (\r\n    <div style={{ margin: \"0 auto\", maxWidth: 720 }}>\r\n      <div style={{ paddingTop: \"1em\"}}>\r\n        <button onClick={handleReplay}>replay</button>\r\n        <button onClick={playing ? handleStop : handleStart}>\r\n          { playing ? 'stop' : 'start' }\r\n        </button>\r\n        <input type=\"number\" step=\"50\" min=\"100\" max=\"1000\" onChange={e => setDuration(e.target.value * 1)} value={duration} />\r\n        {keyframes.length > 0 && (\r\n          <RacingBarChart\r\n            keyframes={keyframes}\r\n            numOfBars={numOfBars}\r\n            width={chartWidth}\r\n            height={chartWidth * ratio}\r\n            margin={chartMargin}\r\n            onStart={() => forceUpdate(true)}\r\n            onStop={() => forceUpdate(false)}\r\n            ref={chartRef}\r\n            duration={duration}\r\n            ratio={ratio}\r\n          />\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\n\r\nexport default function useWindowSize() {\r\n  const getSize = () => ({\r\n    width: window.innerWidth,\r\n    height: window.innerHeight,\r\n  });\r\n  const [windowSize, setWindowSize] = React.useState(getSize);\r\n  React.useEffect(() => {\r\n    const onResize = () => {\r\n      setWindowSize(getSize);\r\n    };\r\n    window.addEventListener('resize', onResize);\r\n    return () => window.removeEventListener('resize', onResize);\r\n  }, []);\r\n  return windowSize\r\n}","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === \"localhost\" ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === \"[::1]\" ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener(\"load\", () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            \"This web app is being served cache-first by a service \" +\r\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === \"installed\") {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                \"New content is available and will be used when all \" +\r\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log(\"Content is cached for offline use.\");\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error(\"Error during service worker registration:\", error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get(\"content-type\");\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        \"No internet connection found. App is running in offline mode.\"\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if (\"serviceWorker\" in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}